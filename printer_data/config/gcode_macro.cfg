# K1
# CreateDate: 2023/03/21

[gcode_macro PRINTER_PARAM]
variable_z_safe_pause: 0.0
variable_z_safe_g28: 3.0
variable_max_x_position: 226.0
variable_max_y_position: 200.0
variable_max_z_position: 250.0
variable_fans: 3
variable_auto_g29: 0
variable_fan0_min: 25
variable_fan1_min: 50
variable_fan2_min: 180
variable_fan2_speed: 0
variable_hotend_temp: 0
variable_e_min_current: 0.27
gcode:


[gcode_shell_command ZABIJ_KAMERE]
command: systemctl stop crowsnest

[gcode_shell_command OZYW_KAMERE]
command: systemctl start crowsnest


[gcode_macro LOAD_MATERIAL_CLOSE_FAN2]
variable_fan2_value: 0
gcode:
  SAVE_GCODE_STATE NAME=myMoveState
  {% if printer['output_pin fan2'].value > 0.0 %}
    SET_GCODE_VARIABLE MACRO=LOAD_MATERIAL_CLOSE_FAN2 VARIABLE=fan2_value VALUE={printer['output_pin fan2'].value}
    M107 P2
  {% endif %}
  RESTORE_E_CURRENT

[gcode_macro LOAD_MATERIAL_RESTORE_FAN2]
gcode:
  {% set fan2_value = printer['gcode_macro LOAD_MATERIAL_CLOSE_FAN2'].fan2_value|float %}
  RESTORE_GCODE_STATE NAME=myMoveState
  {% if fan2_value > 0.0 %}
    {% set s_value = (fan2_value * 255 - printer["gcode_macro PRINTER_PARAM"].fan2_min) * 255 / (255 - printer["gcode_macro PRINTER_PARAM"].fan2_min) %}
    M106 P2 S{s_value}
    SET_GCODE_VARIABLE MACRO=LOAD_MATERIAL_CLOSE_FAN2 VARIABLE=fan2_value VALUE=0
  {% endif %}
  SET_E_MIN_CURRENT

[gcode_macro M109]
description: Wait for hot end temp before proceeding (does not wait to stabilize)
rename_existing: M99109
gcode:
    #Parameters
    {% set s = params.S|float %}
    
    M104 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}  ; Set hotend temp
    {% if s != 0 %}
        TEMPERATURE_WAIT SENSOR=extruder MINIMUM={s} MAXIMUM={s+1}   ; Wait for hotend temp (within 1 degree)
    {% endif %}

[gcode_macro LOAD_MATERIAL]
gcode:
  LOAD_MATERIAL_CLOSE_FAN2
  M109 S{printer.custom_macro.default_extruder_temp}
  G91
  G1 E80 F180
  LOAD_MATERIAL_RESTORE_FAN2

[gcode_macro QUIT_MATERIAL]
gcode:
  SAVE_GCODE_STATE NAME=myMoveState
  M109 S{printer.custom_macro.default_extruder_temp}
  G91
  G1 E20 F180
  G1 E-30 F180
  G1 E-50 F2000
  RESTORE_GCODE_STATE NAME=myMoveState

[gcode_macro M205]
gcode:
  {% if 'X' in params %}
    SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY={params.X}
  {% elif 'Y' in params %}
    SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY={params.Y}
  {% endif %}

[gcode_macro M106]
description: Set Fan Speed. P0 for part, P2 for auxiliary, P3 chamber
gcode:
  {% set fan_map = {0: "Part_Fan", 2: "Side_Fan", 3: "Chamber_Fan"} %}
  {% set fan_id = params.P|default(0)|int %}
  {% set fan = fan_map[fan_id] %}
  {% set speed_param = params.S|default(255)|int %}
  {% if speed_param > 0 %}
    {% set speed = (speed_param|float / 255) %}
  {% else %}
    {% set speed = 0 %}
  {% endif %}
  SET_FAN_SPEED FAN={fan} SPEED={speed}


[gcode_macro M107]
description: Set Fan Off. P0 for part, P2 for auxiliary, P3 chamber
gcode:
  {% set fan_map = {0: "Part_Fan", 2: "Side_Fan", 3: "Chamber_Fan"} %}
  {% set fan_id = params.P|default(0)|int %}
  {% set fan = fan_map[fan_id] %}
  SET_FAN_SPEED FAN={fan} SPEED=0


#[gcode_macro M141]
#description: Set Chamber temperature with slicers
#gcode:
#  SET_TEMPERATURE_FAN_TARGET TEMPERATURE_FAN=chamber_fan TARGET={params.S|default(35)}

[gcode_macro M900]
gcode:
  {% if 'K' in params %}
    {% if 'E' in params %}
      SET_PRESSURE_ADVANCE EXTRUDER={params.E} ADVANCE={params.K}
    {% else %}
      SET_PRESSURE_ADVANCE ADVANCE={params.K}
    {% endif %}
  {% endif %}


[delayed_gcode wait_temp]
# initial_duration: 2.
gcode:
  {% set cur_temp = printer.extruder.temperature %}
  {% if cur_temp|int < 40 %}
    WAIT_TEMP_END
  {% else %}
    UPDATE_DELAYED_GCODE ID=wait_temp DURATION=5
  {% endif %}

[gcode_macro WAIT_TEMP_START]
gcode:
  {action_respond_info("wait temp start\n")}
  UPDATE_DELAYED_GCODE ID=wait_temp DURATION=1
  M106 P0 S255
  # M106 P2 S255

[gcode_macro WAIT_TEMP_END]
gcode:
  {action_respond_info("wait temp end\n")}
  UPDATE_DELAYED_GCODE ID=wait_temp DURATION=0
  M106 P0 S0
  # M106 P2 S0

[gcode_macro PRINT_CALIBRATION]
# This part of the command is replaced by the application side without passing parameters
gcode:
  CX_PRINT_LEVELING_CALIBRATION

[gcode_macro ACCURATE_G28]
gcode:
  ACCURATE_HOME_Z



[gcode_macro PRINT_PREPARED]
gcode:
  SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=prepare VALUE=1
  {action_respond_info("print prepared")}

[gcode_macro PRINT_PREPARE_CLEAR]
gcode:
  SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=prepare VALUE=0

[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
gcode:
    # Parameters
    {% set z = params.Z|default(10)|int %}                                                   ; z hop amount

    {% if printer['pause_resume'].is_paused|int == 0 %}
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}                              ; set z hop variable for reference in resume macro
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer['extruder'].target}    ; set hotend temp variable for reference in resume macro

        SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0                                  ; disable filament sensor
        SAVE_GCODE_STATE NAME=PAUSE                                                          ; save current print position for resume
        BASE_PAUSE                                                                           ; pause print
        {% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}       ; check that zhop doesn't exceed z max
            G91                                                                              ; relative positioning
            G1 Z{z} F900                                                                     ; raise Z up by z hop amount
        {% else %}
            { action_respond_info("Pause zhop exceeds maximum Z height.") }                  ; if z max is exceeded, show message and set zhop value for resume to 0
            SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0
        {% endif %}
        G90                                                                                  ; absolute positioning
        G1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} F6000   ; park toolhead at front center
        SAVE_GCODE_STATE NAME=PAUSEPARK                                                      ; save parked position in case toolhead is moved during the pause (otherwise the return zhop can error)
        M104 S0                                                                              ; turn off hotend
        SET_IDLE_TIMEOUT TIMEOUT=43200                                                       ; set timeout to 12 hours
    {% endif %}

[gcode_macro INPUTSHAPER]
gcode:
  SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0
  SET_FILAMENT_SENSOR SENSOR=filament_sensor_2 ENABLE=0
  G90
  G28
  {% set POSITION_X = printer.configfile.settings['stepper_x'].position_max/2 %}
  {% set POSITION_Y = printer.configfile.settings['stepper_y'].position_max/2 %}
  G1 X{POSITION_X} Y{POSITION_Y} F6000
  G1 Z10 F600
  SHAPER_CALIBRATE
  CXSAVE_CONFIG
  SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=1
  SET_FILAMENT_SENSOR SENSOR=filament_sensor_2 ENABLE=1

[gcode_macro BEDPID]
gcode:
  PID_CALIBRATE HEATER=heater_bed TARGET=100
  SAVE_CONFIG

[gcode_macro TUNOFFINPUTSHAPER]
gcode:
  SET_INPUT_SHAPER SHAPER_FREQ_X=0 SHAPER_FREQ_Y=0

[gcode_macro RESUME]
rename_existing: BASE_RESUME
variable_zhop: 0
variable_etemp: 0
gcode:
    # Parameters
    {% set e = params.E|default(2.5)|int %}                                          ; hotend prime amount (in mm)

    {% if printer['pause_resume'].is_paused|int == 1 %}
        SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=1                          ; enable filament sensor
        #INITIAL_RGB                                                                    ; reset LCD color
        SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}  ; set timeout back to configured value
        {% if etemp > 0 %}
            M109 S{etemp|int}                                                        ; wait for hotend to heat back up
        {% endif %}
        RESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=100                     ; go back to parked position in case toolhead was moved during pause (otherwise the return zhop can error)
        G91                                                                          ; relative positioning
        M83                                                                          ; relative extruder positioning
        {% if printer[printer.toolhead.extruder].temperature >= printer.configfile.settings.extruder.min_extrude_temp %}
            G1 Z{zhop * -1} E{e} F900                                                ; prime nozzle by E, lower Z back down
        {% else %}
            G1 Z{zhop * -1} F900                                                     ; lower Z back down without priming (just in case we are testing the macro with cold hotend)
        {% endif %}
        RESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=60                          ; restore position
        BASE_RESUME                                                                  ; resume print
    {% endif %}


[gcode_macro CANCEL_PRINT]
description: Cancel the actual running print
rename_existing: CANCEL_PRINT_BASE
gcode:
  END_PRINT
  CANCEL_PRINT_BASE

[gcode_macro G29]
gcode:
  {% if 'PROBE_COUNT' in params|upper %}
    {% set get_count = ('PROBE_COUNT' + params.PROBE_COUNT) %}
  {%else %}
    {% set get_count = "" %}
  {% endif %}

  {% set bed_temp = printer.custom_macro.default_bed_temp %}
  {% set extruder_temp = printer.custom_macro.g28_ext_temp %}
  {% set nozzle_clear_temp = printer.custom_macro.default_extruder_temp %}

  {% if 'BED_TEMP' in params|upper %}
    {% set bed_temp = params.BED_TEMP %}
  {% endif %}

  {% if 'EXTRUDER_TEMP' in params|upper %}
    {% set nozzle_clear_temp = params.EXTRUDER_TEMP %}
  {% endif %}
  SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0
  SET_FILAMENT_SENSOR SENSOR=filament_sensor_2 ENABLE=0

  G28
  BED_MESH_CLEAR
  NOZZLE_CLEAR HOT_MIN_TEMP={extruder_temp} HOT_MAX_TEMP={nozzle_clear_temp} BED_MAX_TEMP={bed_temp}
  ACCURATE_G28
  M204 S5000
  SET_VELOCITY_LIMIT ACCEL_TO_DECEL=5000
  BED_MESH_CALIBRATE {get_count}
  BED_MESH_OUTPUT
  {% set y_park = printer.toolhead.axis_maximum.y/2 %}
  {% set x_park = printer.toolhead.axis_maximum.x|float - 10.0 %}
  G1 X{x_park} Y{y_park} F2000
  CXSAVE_CONFIG
  TURN_OFF_HEATERS
  SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=1
  SET_FILAMENT_SENSOR SENSOR=filament_sensor_2 ENABLE=1

# [gcode_macro G299]
# gcode:
#     BED_MESH_CLEAR
#     G28
#     PRTOUCH_READY
#     BED_MESH_CALIBRATE
#     BED_MESH_OUTPUT

[gcode_macro update_git]
gcode:
    {% set message = params.MESSAGE|default() %}
    {% if message %}
        RUN_SHELL_COMMAND CMD=update_git_script_message PARAMS="'{params.MESSAGE}'"
    {% else %}
        RUN_SHELL_COMMAND CMD=update_git_script
    {% endif %}

[gcode_shell_command update_git_script]
command: bash -c "bash $HOME/klipper-backup/script.sh"
timeout: 90.0
verbose: True

[gcode_shell_command update_git_script_message]
command: bash -c "bash $HOME/klipper-backup/script.sh -c \"$0\""
timeout: 90.0
verbose: True

[gcode_macro _START_END_PARAMS]
# this value is multiplied by the target temp to give wait time in seconds
variable_bed_warp_wait_multiplier: 8.0
# how far below target temp can the bed be to do fractional wait times
variable_bed_warp_fraction_wait: 0.75
# how long to wait each loop before displaying a status message
variable_bed_warp_wait_interval: 10
# if you want START_PRINT to enable filament sensor and END_PRINT to disable
variable_enable_disable_filament_sensor: True
variable_start_max_velocity: 400
variable_start_max_accel: 90000
variable_carto_touch_retries: 20
variable_carto_touch_samples: 3
# where not using cartotouch what to heat nozzle to just before oozing
variable_start_preheat_nozzle_temp: 160
variable_end_print_cool_down: False
variable_end_print_cool_down_nozzle_temp: 80.0
gcode:

[gcode_macro _CLIENT_VARIABLE]
variable_park_at_cancel   : True  ; allow to move the toolhead to park while execute CANCEL_PRINT [True/False]
variable_custom_park_dz   : 3.0   ; custom dz value; the value in mm to lift the nozzle when move to park position
variable_use_custom_pos   : False ; use custom park coordinates for x,y [True/False]
variable_custom_park_x    : 130.0   ; custom x position; value must be within your defined min and max of X
variable_custom_park_y    : 220.0   ; custom y position; value must be within your defined min and max of Y
variable_retract          : 1.0   ; the value to retract while PAUSE
variable_cancel_retract   : 5.0   ; the value to retract while CANCEL_PRINT
variable_speed_retract    : 35.0  ; retract speed in mm/s
variable_unretract        : 1.0   ; the value to unretract while RESUME
variable_speed_unretract  : 35.0  ; unretract speed in mm/s
variable_speed_hop        : 15.0  ; z move speed in mm/s
variable_speed_move       : 150.0 ; move speed in mm/s
gcode:

[gcode_macro START_PRINT]
variable_bed_temp: 105
variable_extruder_temp: 245
gcode:
    {% set BED_TEMP = params.BED_TEMP|default(105)|float %}
    {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(245)|float %}
    m104 S{160}                                                                     # start heating nozzle dont wait
    M140 S{BED_TEMP}                                                                # start heating bed to desired bed temps and wait
    G28
    BED_MESH_CLEAR                                                                  # clear current mesh
    G4 P500                                                                         # wait required to prevent MCU overload / inconsistant meshing
    SET_VELOCITY_LIMIT ACCEL=10000 ACCEL_TO_DECEL=9000 SQUARE_CORNER_VELOCITY=25   # drop accels to prevent hyper agressive meshing
    QUICK_CLEAN_NOZZLE
    G28
    M107 P0                                                                         # Set nozzle fan to off
    M140 S{BED_TEMP}                                                                # start bedmesh calibrate
    BED_MESH_CALIBRATE                                                              # start heating bed to desired bed temps and wait
    CARTOGRAPHER_TOUCH # CALIBRATE=0
                                                                  
    G4 P500                                                                         # wait required to prevent MCU overload / inconsistant mesh calculation
    SMART_PARK                                                                      # park the printhead near the print area
    SET_VELOCITY_LIMIT ACCEL=12000 ACCEL_TO_DECEL=10000 SQUARE_CORNER_VELOCITY=5    # up acceleration back to slightly below regular travel speeds
    M190 S{BED_TEMP}                                                                # wait for bed temperature before next step
    M109 S{EXTRUDER_TEMP}                                                           # wait for nozzle temperature before next step
    LINE_PURGE                                                                      # create purge line near the print area of the part
    {action_respond_info("Mordo! Model 3D Wczytany, Jedziemy z tym.")}              # happy printing~


[gcode_macro END_PRINT]
gcode:
  G91                                                                                 # set to reletive positioning
  G1 E-5 F300                                                                         # Retract 5mm of filament at 300mm/min
  G1 Z15                                                                               # move z down 15mm to avoid contacting nozzle
  G90                                                                                 # set to absolute positioning
  {% set POSITION_X = printer.configfile.settings['stepper_x'].position_max *0.8 %}  # Calculate 99% position of X 
  {% set POSITION_Y = printer.configfile.settings['stepper_y'].position_max /3 %}     # calculate 50% of total Y
  G1 X{POSITION_X} Y{POSITION_Y} F6000                                                # move toolhead to the front of the K1 aux fan like stock
#  M220 S100                                                                           # set feedrate to 100
#  M204 S500                                                                           # set starting acceleration to 500
  TURN_OFF_HEATERS                                                                    # disable heaters
  M84                                                                                 # power off motors
    {action_respond_info("Print complete, cooling that nozzle 160c.")}                  # End Print Notification
  M106 P0 S1                                                                        # Set nozzle fan to max
  M106 P2 S1                                                                        # Set side fan to max
  M104 S160                                                                           # Cool nozzle to 150c to reduce oozing
  M107 P0                                                                             # turn toolhead fan off
  M107 P2                                                                             # turn sidefan off 
  SET_PAUSE_NEXT_LAYER ENABLE=0
  SET_PAUSE_AT_LAYER ENABLE=0 LAYER=0
  M84                                                                                 # disable stepper motors
  M104 S0                                                                             # turn off hot end
  EXCLUDE_OBJECT_DEFINE RESET=1                                                       # reset bed mesh boundaries

[gcode_macro LOAD_FILAMENT]
description: Load filament into the hotend
gcode:
  {% set EXTRUDE_LENGTH = params.EXTRUDE_LENGTH|default(50)|float %}
  {% set EXTRUDE_SPEED = params.EXTRUDE_SPEED|default(5)|float %}
  {% set RETRACT_LENGTH = params.RETRACT_LENGTH|default(2)|float %}
  {% set TEMPERATURE = params.TEMPERATURE|default(220)|float %}
  M117 Heating up to load filament
  M104 S{TEMPERATURE}
  M109 S{TEMPERATURE}
  M117 Loading filament
  G92 E0
  G1 E{EXTRUDE_LENGTH} F{EXTRUDE_SPEED * 60}
  G1 E-{RETRACT_LENGTH} F{EXTRUDE_SPEED * 60}
  G4 P5000  # Wait 5 seconds
  M104 S0 # turn off extruder heater
  M117 Filament load complete
  {action_respond_info("Mmm, delicious!")}

[gcode_macro UNLOAD_FILAMENT]
description: Unload filament from the hotend
gcode:
  {% set RETRACT_LENGTH = params.RETRACT_LENGTH|default(100)|float %}
  {% set RETRACT_SPEED = params.RETRACT_SPEED|default(5)|float %}
  {% set FAST_RETRACT_LENGTH = params.FAST_RETRACT_LENGTH|default(20)|float %}
  {% set FAST_RETRACT_SPEED = params.FAST_RETRACT_SPEED|default(40)|float %}
  {% set TEMPERATURE = params.TEMPERATURE|default(220)|float %}
  M117 Heating up to unload filament
  M104 S{TEMPERATURE}
  M109 S{TEMPERATURE}
  M117 Unloading filament
  G92 E0
  G1 E-{RETRACT_LENGTH} F{RETRACT_SPEED * 60}
  G1 E-{FAST_RETRACT_LENGTH} F{FAST_RETRACT_SPEED * 60}
  M104 S{150}
  M117 Filament unload complete
  {action_respond_info("That filament sucked anyway.")}
[gcode_macro QUICK_CLEAN_NOZZLE]
gcode:
    # Move nozzle to cleaning position
    m104 S160
    G1 X1 Y1 Z10 F3000  ; Move to cleaning position
    M400  ; Wait for moves to finish

    # Clean nozzle
    G1 Z0 F300  ; Lower nozzle to 0mm above the bed
    M106 P0 S1  ; Set nozzle fan to max
    G1 X75 Y1 F300  ; Wipe nozzle on the bed
[gcode_macro TEST_SPEED]
# Home, get position, throw around toolhead, home again.
# If MCU stepper positions (first line in GET_POSITION) are greater than a full step different (your number of microsteps), then skipping occured.
# We only measure to a full step to accomodate for endstop variance.
# Example: TEST_SPEED SPEED=300 ACCEL=5000 ITERATIONS=10

description: Test for max speed and acceleration parameters for the printer. Procedure: Home -> ReadPositionFromMCU -> MovesToolhead@Vel&Accel -> Home -> ReadPositionfromMCU

gcode:
    # Speed
    {% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
    # Iterations
    {% set iterations = params.ITERATIONS|default(5)|int %}
    # Acceleration
    {% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
    # Minimum Cruise Ratio
    {% set min_cruise_ratio = params.MIN_CRUISE_RATIO|default(0.5)|float %}
    # Bounding inset for large pattern (helps prevent slamming the toolhead into the sides after small skips, and helps to account for machines with imperfectly set dimensions)
    {% set bound = params.BOUND|default(20)|int %}
    # Size for small pattern box
    {% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}
    
    # Large pattern
        # Max positions, inset by BOUND
        {% set x_min = printer.toolhead.axis_minimum.x + bound %}
        {% set x_max = printer.toolhead.axis_maximum.x - bound %}
        {% set y_min = printer.toolhead.axis_minimum.y + bound %}
        {% set y_max = printer.toolhead.axis_maximum.y - bound %}
    
    # Small pattern at center
        # Find X/Y center point
        {% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}
        {% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}
        
        # Set small pattern box around center point
        {% set x_center_min = x_center - (smallpatternsize/2) %}
        {% set x_center_max = x_center + (smallpatternsize/2) %}
        {% set y_center_min = y_center - (smallpatternsize/2) %}
        {% set y_center_max = y_center + (smallpatternsize/2) %}

    # Save current gcode state (absolute/relative, etc)
    SAVE_GCODE_STATE NAME=TEST_SPEED
    
    # Output parameters to g-code terminal
    { action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }
    
    # Home and get position for comparison later:
        M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
        G28
        # QGL if not already QGLd (only if QGL section exists in config)
        {% if printer.configfile.settings.quad_gantry_level %}
            {% if printer.quad_gantry_level.applied == False %}
                QUAD_GANTRY_LEVEL
                G28 Z
            {% endif %}
        {% endif %} 
        # Move 50mm away from max position and home again (to help with hall effect endstop accuracy - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/24)
        G90
        G1 X{printer.toolhead.axis_maximum.x-50} Y{printer.toolhead.axis_maximum.y-50} F{30*60}
        M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
        G28 X Y
        G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
        G4 P1000 
        GET_POSITION

    # Go to starting position
    G0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}

    # Set new limits
    {% if printer.configfile.settings.printer.minimum_cruise_ratio is defined %}
        SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} MINIMUM_CRUISE_RATIO={min_cruise_ratio}
    {% else %}
        SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}
    {% endif %}

    {% for i in range(iterations) %}
        # Large pattern diagonals
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_max} Y{y_max} F{speed*60}
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}
        G0 X{x_min} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}
        
        # Large pattern box
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_min} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}
    
        # Small pattern diagonals
        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_max} Y{y_center_max} F{speed*60}
        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}
        G0 X{x_center_min} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}
        
        # Small pattern box
        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_min} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}
    {% endfor %}

    # Restore max speed/accel/accel_to_decel to their configured values
    {% if printer.configfile.settings.printer.minimum_cruise_ratio is defined %}
        SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} MINIMUM_CRUISE_RATIO={printer.configfile.settings.printer.minimum_cruise_ratio} 
    {% else %}
        SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}
    {% endif %}

    # Re-home and get position again for comparison:
        M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
        G28 # This is a full G28 to fix an issue with CoreXZ - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/12
        # Go to XY home positions (in case your homing override leaves it elsewhere)
        G90
        G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
        G4 P1000 
        GET_POSITION

    # Restore previous gcode state (absolute/relative, etc)
    RESTORE_GCODE_STATE NAME=TEST_SPEED
    
